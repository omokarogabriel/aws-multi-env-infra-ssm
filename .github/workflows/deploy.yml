


###### 1 NEW DEPLOY

name: Terraform Deploy

on:
  push:
    branches:
      - '**'  # Trigger for any branch   

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      TF_IN_AUTOMATION: true
      OWNER: omokarogabriel
      ANSIBLE_REPO: aws-multi-env-infra-ssm-ansible
      # Map branches to environment folders
      ENV_DIR: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || github.ref_name == 'dev' && 'dev' || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5


            # ✅ Create the SSH private key file for Terraform
      - name: Write GitHub SSH key to file
        run: |
          mkdir -p modules/frontend
          echo "${{ secrets.MY_GITHUB_SSH_PRIVATE_KEY }}" > modules/frontend/latest_github_key
          chmod 600 modules/frontend/latest_github_key



      - name: Terraform Init
        working-directory: environments/${{ env.ENV_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: environments/${{ env.ENV_DIR }}
        run: terraform plan

      - name: Terraform Apply
        if: github.ref_name != 'dev' && github.ref_name != 'feature' # skip apply for dev & feature branches
        working-directory: environments/${{ env.ENV_DIR }}
        run: terraform apply -auto-approve


      - name: Trigger Ansible workflow in another repo
        if: success()
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            https://api.github.com/repos/${{ env.OWNER }}/aws-multi-env-infra-ssm-ansible/dispatches \
            -d "{\"event_type\": \"run-ansible\", \"client_payload\": {\"env_name\": \"${{ github.ref_name == 'main' && 'prod' || github.ref_name }}\"}}"


##### 2 NEW DEPLOY


# name: Terraform Deploy

# on:
#   push:
#     branches:
#       - '**'  # Trigger on any branch

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     env:
#       AWS_REGION: us-east-1
#       TF_IN_AUTOMATION: true
#       # Map branches to environment folders
#       ENV_DIR: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || github.ref_name == 'dev' && 'dev' || 'dev' }}

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.8.5

#       # ✅ Create the SSH private key file for Terraform
#       - name: Write GitHub SSH key to file
#         run: |
#           mkdir -p modules/frontend
#           echo "${{ secrets.MY_GITHUB_SSH_PRIVATE_KEY }}" > modules/frontend/latest_github_key
#           chmod 600 modules/frontend/latest_github_key

#       - name: Terraform Init
#         working-directory: environments/${{ env.ENV_DIR }}
#         run: terraform init

#       - name: Terraform Plan
#         working-directory: environments/${{ env.ENV_DIR }}
#         run: terraform plan

#       # Apply for staging automatically
#       - name: Terraform Apply (Staging)
#         if: github.ref_name == 'staging'
#         working-directory: environments/${{ env.ENV_DIR }}
#         run: terraform apply -auto-approve

#   approve-prod:
#     needs: deploy
#     if: github.ref_name == 'main'
#     runs-on: ubuntu-latest
#     # environment: production
#     steps:
#       - name: Wait for approval
#         run: echo "✅ Approved for Production Deploy"

#   apply-prod:
#     needs: approve-prod
#     if: github.ref_name == 'main'
#     runs-on: ubuntu-latest
#     env:
#       AWS_REGION: us-east-1
#       TF_IN_AUTOMATION: true
#       ENV_DIR: prod
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.8.5

#       # ✅ Create the SSH private key file for Terraform
#       - name: Write GitHub SSH key to file
#         run: |
#           mkdir -p modules/frontend
#           echo "${{ secrets.MY_GITHUB_SSH_PRIVATE_KEY }}" > modules/frontend/latest_github_key
#           chmod 600 modules/frontend/latest_github_key

#       - name: Terraform Init
#         working-directory: environments/${{ env.ENV_DIR }}
#         run: terraform init

#       - name: Terraform Apply (Production)
#         working-directory: environments/${{ env.ENV_DIR }}
#         run: terraform apply -auto-approve

